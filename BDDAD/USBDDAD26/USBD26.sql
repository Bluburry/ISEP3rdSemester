CREATE OR REPLACE FUNCTION FNCGETNOVOLOGID RETURN NUMBER IS
	NEWID NUMBER := 0;
BEGIN
	SELECT
		NVL(MAX(IDLOG), 0) INTO NEWID
	FROM
		HISTORIALOPERACOES;
	RETURN (NEWID + 1);
END;
/

CREATE OR REPLACE TRIGGER TRGNOVOLOG AFTER
	INSERT OR UPDATE ON OPERACAO FOR EACH ROW
DECLARE
	NEWID HISTORIALOPERACOES.IDLOG%TYPE := FNCGETNOVOLOGID();
BEGIN
	INSERT INTO HISTORIALOPERACOES(
		IDLOG,
		OPERACAOID,
		DIAOPERACAO,
		DATAREGISTO,
		QUANTIDADE,
		TIPOUNIDADE,
		TIPOOPERACAOAGRICOLA,
		NOMEESTADOOPERACAO
	) VALUES(
		NEWID,
		:NEW.OPERACAOID,
		:NEW.DIAOPERACAO,
		:NEW.DATAREGISTO,
		:NEW.QUANTIDADE,
		:NEW.TIPOUNIDADE,
		:NEW.TIPOOPERACAO,
		:NEW.NOMEESTADOOPERACAO
	);
END;
/


-- Blocos Anónimos --
SET SERVEROUTPUT ON

DECLARE
	VOPERACAOID         OPERACAO.OPERACAOID%TYPE := 9999999;
	VDIAOPERACAO        OPERACAO.DIAOPERACAO%TYPE := SYSDATE;
	VQUANTIDADE         OPERACAO.QUANTIDADE%TYPE := 100;
	VTIPOUNIDADE        OPERACAO.TIPOUNIDADE%TYPE := 'un';
	VTIPOOPERACAO       OPERACAO.TIPOOPERACAO%TYPE := 'Plantação';
	VNOMEESTADOOPERACAO OPERACAO.NOMEESTADOOPERACAO%TYPE := 'Placeholder';
	VLOGID              HISTORIALOPERACOES.IDLOG%TYPE;
BEGIN
	INSERT INTO OPERACAO (
		OPERACAOID,
		DIAOPERACAO,
		QUANTIDADE,
		TIPOUNIDADE,
		TIPOOPERACAO,
		NOMEESTADOOPERACAO
	) VALUES (
		VOPERACAOID,
		VDIAOPERACAO,
		VQUANTIDADE,
		VTIPOUNIDADE,
		VTIPOOPERACAO,
		VNOMEESTADOOPERACAO
	);
END;
/
